Name: Ruining Wang
UCLA ID Number: 004192849

a. A brief description of notable obstacles you overcame.
    I was able to break down the project into pieces where I could write out draft in Visual studio Code as a block
function that serves for certain functionality. (for example, I first tested if all chars in the given string is valid
by themselves) and I was able to write out a main to test specific function individually. I also figured out by finally 
building up the whole project together, that I have to place the functions in certain order so that one function is 
initialized before it was called by another function or by the main. I was also able to insert in lines of code to test
out (for example to cout certain result or variable) to see if the code runs as expected and locate the bug. At the end, 
I finally set up the use of G31 with windows and tested my code with the G31.  

b. A description of the design of your program. You should use  pseudocode in this description where it clarifies the 
presentation.
After read through the project and the warm up and examples, I determined to solve the problem in a sequence of:
    (1) make sure all chars in the string is valid (that is only 'P,p,D,d,C,c,+,-') without thinking about the
    ordering of chars, negative values of a type, position of certain char. (later on, I added an additional if
    statement to make sure last char is 'P' or 'p' as a rule that it must follow.)
    (2) in general, I used a while statement to record chars in string
    (3) I was trying then to determine if the string is valid while recording all 6 numbers of different types(PpDdCc)
    by passing around pass-by-ref, with a int pos to record the position of string I am at.
    (4) I was thinking of dividing the whole string by '+'/'-' (if there is one), with a pass-by-ref int addition, I 
    was adding number when after '+' and decreasing number after '-'
    (5) then, by the rules, string has to start from Cc/Dd, when I call two functions to readcat/dog, respectively. Then 
    when pos meets a P/p by rules, it calls readppl to start counting ppl number; when pos then meets +/-, it returns 
    back to the very first function with a change of the addition(if changed); within each case, the value of numbers is 
    judged to be positive, and all rules of the park should be followed, otherwise return a false and resulting in 
    'invalid string'.

c. A list of the test data that could be used to thoroughly test your program, along with the reason for each test. 

All of the following are examples of valid animal park strings:
CP+dp-CP-dp                (no dogs, no cats and no people left in the park after the string is processed)
dp+cp                      (one puppy, one kitten and two children left in the park after the string is processed)
CP+dp-CP                   (one puppy and one child left in the park after the string is processed)
ccCP+ddDP                  (two kittens, one cat, two puppies, one dog and two adults left in the park after the string is processed)
dP+dp-ddPp                 (animals entering separately can leave together, as long as they leave after having entered and dogs and cats are not entering or leaving together)
DP+CP+cp+dp-Dp-Cp-dP-cP    (any present group of pets and people can leave, once they have entered the park, whether they arrived with that pet or not)
CCP-CP                     (pets and people in any combination may be left behind after the string is fully processed)
CcCccccCPP+DDdp-CCccP	   (valid, testing sequence of chars, as long as C/D before P and grouped together, valid)

All of the following are examples of invalid animal park strings:
asdf1ABC000:2-55           (no characters allowed besides c, C, d, D, p, P, + or -)
+dp+cp                     (no leading + allowed)
d p + c p                  (no spaces allowed)
-dp+dp                     (no leading - allowed and a pet cannot leave before it has entered)
dp-CP                      (a pet cannot leave before it has entered)
cCcDP                      (dogs and cats cannot be mixed on a single entry into the park)
cP+dP-cdPP                 (dogs and cats cannot be mixed on a single exit from the park)
cpP-P                      (you cannot leave without having a pet with you)
cp+P-cpP                   (you cannot enter without having a pet with you)
dddddPcccccP               (on one entry, all the pets need to be grouped together followed by all their owners)
ddDP+ccCP-                 (string must end with owners and no extra spare characters)
ddDP+cccP+                 (string must end with owners and no extra spare characters)

CodeBoard test:

Input:

isValidAnimalParkString 123456    (invalid chars in string)
isValidAnimalParkString ccPP	  (valid)
isValidAnimalParkString ccPP+DDpp (valid)
isValidAnimalParkString ccPP+DDpp-cp-DP (valid)
isValidAnimalParkString dP-    (not valid, end with a -)
isValidAnimalParkString dPdp   (not valid, d after a P)
isValidAnimalParkString CP+cp  (valid)
dogsLeft CP+cp   (valid, read out 0)
dogsLeft dpDP    (not valid, D after p, return -1)
dogsLeft CP+dp+DP (valid, read out 2)
catsLeft CP+cp (valid, read out 2)
catsLeft dpDP  (not valid, D after p,return -1)
catsLeft CP+dp+DP-CP  (valid, return 0)
peopleLeft CP+cp      (valid, return 2)
peopleLeft dpDP       (not valid, return -1)
peopleLeft CP+dp-dp-CP (valid, return 0)

	